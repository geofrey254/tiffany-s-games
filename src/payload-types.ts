/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    rooms: Room;
    room_players: RoomPlayer;
    categories: Category;
    questions: Question;
    game_rounds: GameRound;
    player_answers: PlayerAnswer;
    leaderboard: Leaderboard;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    rooms: RoomsSelect<false> | RoomsSelect<true>;
    room_players: RoomPlayersSelect<false> | RoomPlayersSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    questions: QuestionsSelect<false> | QuestionsSelect<true>;
    game_rounds: GameRoundsSelect<false> | GameRoundsSelect<true>;
    player_answers: PlayerAnswersSelect<false> | PlayerAnswersSelect<true>;
    leaderboard: LeaderboardSelect<false> | LeaderboardSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  stats?: {
    totalGames?: number | null;
    totalWins?: number | null;
    points?: number | null;
  };
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rooms".
 */
export interface Room {
  id: string;
  roomCode: string;
  host?: (string | null) | User;
  status?: ('waiting' | 'in_progress' | 'completed') | null;
  mode: 'elimination' | 'points';
  maxPlayers?: number | null;
  players?: (string | RoomPlayer)[] | null;
  currentRound?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "room_players".
 */
export interface RoomPlayer {
  id: string;
  user?: (string | null) | User;
  room?: (string | null) | Room;
  isEliminated?: boolean | null;
  isFinalist?: boolean | null;
  score?: number | null;
  joinedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title: string;
  slug: string;
  mode: 'image' | 'text' | 'mixed';
  description?: string | null;
  icon?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questions".
 */
export interface Question {
  id: string;
  type: 'image' | 'text-only';
  prompt: string;
  image?: (string | null) | Media;
  questionType: 'multiple-choice' | 'open-ended';
  options?:
    | {
        label: string;
        isCorrect?: boolean | null;
        id?: string | null;
      }[]
    | null;
  correctAnswer?: string | null;
  category?: (string | null) | Category;
  difficulty?: ('easy' | 'medium' | 'hard') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "game_rounds".
 */
export interface GameRound {
  id: string;
  room?: (string | null) | Room;
  question?: (string | null) | Question;
  roundNumber?: number | null;
  category?: (string | null) | Category;
  playersAnswered?: (string | PlayerAnswer)[] | null;
  status?: ('pending' | 'completed') | null;
  startedAt?: string | null;
  endedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "player_answers".
 */
export interface PlayerAnswer {
  id: string;
  round?: (string | null) | GameRound;
  player?: (string | null) | RoomPlayer;
  answer?: string | null;
  isCorrect?: boolean | null;
  timeTaken?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "leaderboard".
 */
export interface Leaderboard {
  id: string;
  user?: (string | null) | User;
  points?: number | null;
  gamesPlayed?: number | null;
  rank?: number | null;
  timeRange?: ('weekly' | 'all_time') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'rooms';
        value: string | Room;
      } | null)
    | ({
        relationTo: 'room_players';
        value: string | RoomPlayer;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'questions';
        value: string | Question;
      } | null)
    | ({
        relationTo: 'game_rounds';
        value: string | GameRound;
      } | null)
    | ({
        relationTo: 'player_answers';
        value: string | PlayerAnswer;
      } | null)
    | ({
        relationTo: 'leaderboard';
        value: string | Leaderboard;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  stats?:
    | T
    | {
        totalGames?: T;
        totalWins?: T;
        points?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rooms_select".
 */
export interface RoomsSelect<T extends boolean = true> {
  roomCode?: T;
  host?: T;
  status?: T;
  mode?: T;
  maxPlayers?: T;
  players?: T;
  currentRound?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "room_players_select".
 */
export interface RoomPlayersSelect<T extends boolean = true> {
  user?: T;
  room?: T;
  isEliminated?: T;
  isFinalist?: T;
  score?: T;
  joinedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  mode?: T;
  description?: T;
  icon?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questions_select".
 */
export interface QuestionsSelect<T extends boolean = true> {
  type?: T;
  prompt?: T;
  image?: T;
  questionType?: T;
  options?:
    | T
    | {
        label?: T;
        isCorrect?: T;
        id?: T;
      };
  correctAnswer?: T;
  category?: T;
  difficulty?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "game_rounds_select".
 */
export interface GameRoundsSelect<T extends boolean = true> {
  room?: T;
  question?: T;
  roundNumber?: T;
  category?: T;
  playersAnswered?: T;
  status?: T;
  startedAt?: T;
  endedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "player_answers_select".
 */
export interface PlayerAnswersSelect<T extends boolean = true> {
  round?: T;
  player?: T;
  answer?: T;
  isCorrect?: T;
  timeTaken?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "leaderboard_select".
 */
export interface LeaderboardSelect<T extends boolean = true> {
  user?: T;
  points?: T;
  gamesPlayed?: T;
  rank?: T;
  timeRange?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}